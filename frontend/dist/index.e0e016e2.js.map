{"mappings":"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","sources":["<anon>","src/script.js"],"sourcesContent":["/*\r\n* Check if browser supports DApps\r\n*/ if (typeof window.ethereum === \"undefined\") alert(\"Please use browser supporting DApps!\");\n/*\r\n* Creates a web3 provider that can be used to retrieve contracts and abi. This is the first step in the contract process\r\n*/ let provider = new ethers.providers.Web3Provider(window.ethereum);\nlet contractAddress;\nlet abi;\n/**\r\n* Fetch data from a URL. This is a wrapper around fetch that handles errors\r\n* \r\n* @param url - The URL to fetch data from\r\n* \r\n* @return { Promise } The data as an object with keys : results : Array of\r\n*/ async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        return data.results;\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n    }\n}\n/**\r\n* Creates select options for contract selection. This function is called from contract availability\r\n* \r\n* @param data - List of data to\r\n*/ function createSelectOptions(data) {\n    const select = document.getElementById(\"selectContract\");\n    select.innerHTML = '<option value=\"\">Select</option>';\n    data.forEach((item)=>{\n        const option = document.createElement(\"option\");\n        option.value = JSON.stringify(item.json_abi) + \"-\" + item.contract_address;\n        const contractCheck = new ethers.Contract(item.contract_address, item.json_abi);\n        option.textContent = item?.contract_name + \" (\" + item.contract_address + \")\";\n        select.appendChild(option);\n    });\n}\n/*\r\n* Loads the smart contract from the server and adds event listeners to the select element\r\n*/ window.addEventListener(\"load\", async ()=>{\n    const data = await fetchData(\"smartcontract.json\");\n    createSelectOptions(data);\n    const select = document.getElementById(\"selectContract\");\n    select.addEventListener(\"change\", async (event)=>{\n        let valuex = event.target.value.split(\"-\");\n        contractAddress = valuex[1];\n        abi = JSON.parse(valuex[0]);\n        changeContract();\n    });\n});\n/**\r\n* Changes the contract to a new one. This is called on clicking the contract button.\r\n* \r\n* \r\n* @return { HTMLElement } The form that was updated with the new contract\r\n*/ function changeContract() {\n    const abiForm = document.getElementById(\"abiForm\");\n    abiForm.innerHTML = \"\";\n    abi.forEach((item)=>{\n        // This is a function that is called when the item is a function.\n        if (item.type === \"function\") {\n            const inputs = item.inputs.map((input)=>{\n                return `<input type=\"text\" name=\"${input.name}\" placeholder=\"${input.name}\" class=\"block w-full border rounded-md px-2 py-1\">`;\n            }).join(\"\");\n            const stateMutabilityLabel = `<label class=\"block mb-2\">State Mutability: ${item.stateMutability}</label>`;\n            const button = `<button type=\"button\" web3fnc=\"${item.name}\" web3sm=\"${item.stateMutability}\" class=\"inline-flex items-center px-4 py-2 bg-blue-500 hover:bg-blue-700 text-white font-bold rounded-md\">Call ${item.name}</button>`;\n            const fieldset = document.createElement(\"fieldset\");\n            fieldset.innerHTML = `<legend class=\"font-bold\">${item.name}</legend>${stateMutabilityLabel}${inputs}${button}`;\n            var form = document.createElement(\"form\");\n            form.setAttribute(\"id\", item.name);\n            abiForm.appendChild(form).appendChild(fieldset);\n        }\n    });\n    const web3buttons = document.querySelectorAll(\"button\");\n    web3buttons.forEach((button)=>{\n        button.addEventListener(\"click\", ()=>{\n            const web3Fnc = button.getAttribute(\"web3fnc\");\n            const web3SM = button.getAttribute(\"web3sm\");\n            submitForm(web3Fnc, web3SM);\n        });\n    });\n}\n/**\r\n* Connects to Ethereum's MetaMask and returns the signer. This is a low - level function and should not be used in production code.\r\n* \r\n* @return { Promise } A promise that resolves to the signer\r\n*/ async function connectToMetaMask() {\n    // If you have a MetaMask installed on the browser\n    if (!window.ethereum) throw new Error(\"Please install MetaMask!\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    return signer;\n}\n/*\r\n* Function to submit form\r\n*/ /**\r\n* Submit form to the contract and display the result to the user. This is a wrapper around the contract method that takes care of creating the transaction and sending it\r\n* \r\n* @param functionName - Name of the function to call\r\n* @param stateMutability - Whether or not to mutate the state\r\n*/ async function submitForm(functionName, stateMutability) {\n    const formData = new FormData(document.getElementById(functionName));\n    const data = {};\n    for (const [key, value] of formData.entries())data[key] = value;\n    const signer = await connectToMetaMask();\n    const contract = new ethers.Contract(contractAddress, abi, signer);\n    try {\n        console.log(contractAddress);\n        const tx = await contract[functionName](...Object.values(data));\n        let jsonString = JSON.stringify(tx, null, 2);\n        Toastify({\n            close: true,\n            duration: -1,\n            text: jsonString,\n            className: \"info\",\n            style: {\n                background: \"linear-gradient(to right, #00b09b, #96c93d)\"\n            }\n        }).showToast();\n        console.log(\"Transaction sent:\", tx);\n    } catch (error) {\n        Toastify({\n            close: true,\n            duration: -1,\n            text: error.message,\n            className: \"error\"\n        }).showToast();\n        console.error(\"Error calling function:\", error);\n    }\n}\n\n//# sourceMappingURL=index.e0e016e2.js.map\n","/*\r\n* Check if browser supports DApps\r\n*/\r\nif (typeof window.ethereum === 'undefined') {\r\n    alert('Please use browser supporting DApps!');\r\n}\r\n\r\n\r\n/*\r\n* Creates a web3 provider that can be used to retrieve contracts and abi. This is the first step in the contract process\r\n*/\r\nlet provider = new ethers.providers.Web3Provider(window.ethereum);\r\nlet contractAddress;\r\nlet abi;\r\n\r\n/**\r\n* Fetch data from a URL. This is a wrapper around fetch that handles errors\r\n* \r\n* @param url - The URL to fetch data from\r\n* \r\n* @return { Promise } The data as an object with keys : results : Array of\r\n*/\r\nasync function fetchData(url) {\r\n    try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        return data.results;\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n    }\r\n}\r\n\r\n/**\r\n* Creates select options for contract selection. This function is called from contract availability\r\n* \r\n* @param data - List of data to\r\n*/\r\nfunction createSelectOptions(data) {\r\n    const select = document.getElementById('selectContract');\r\n    select.innerHTML = '<option value=\"\">Select</option>';\r\n\r\n    data.forEach(item => {\r\n        const option = document.createElement('option');\r\n        option.value = JSON.stringify(item.json_abi) + \"-\" + item.contract_address;\r\n        const contractCheck = new ethers.Contract(item.contract_address, item.json_abi);\r\n\r\n        option.textContent = item?.contract_name + ' (' + item.contract_address + ')';\r\n        select.appendChild(option);\r\n    });\r\n}\r\n\r\n/*\r\n* Loads the smart contract from the server and adds event listeners to the select element\r\n*/\r\nwindow.addEventListener('load', async () => {\r\n    const data = await fetchData('smartcontract.json');\r\n    createSelectOptions(data);\r\n    const select = document.getElementById('selectContract');\r\n    select.addEventListener('change', async (event) => {\r\n        let valuex = event.target.value.split(\"-\");\r\n        contractAddress = valuex[1];\r\n        abi = JSON.parse(valuex[0]);\r\n        changeContract();\r\n    });\r\n});\r\n\r\n\r\n/**\r\n* Changes the contract to a new one. This is called on clicking the contract button.\r\n* \r\n* \r\n* @return { HTMLElement } The form that was updated with the new contract\r\n*/\r\nfunction changeContract() {\r\n    const abiForm = document.getElementById('abiForm');\r\n    abiForm.innerHTML = '';\r\n    abi.forEach(item => {\r\n        // This is a function that is called when the item is a function.\r\n        if (item.type === 'function') {\r\n            const inputs = item.inputs.map(input => {\r\n                return `<input type=\"text\" name=\"${input.name}\" placeholder=\"${input.name}\" class=\"block w-full border rounded-md px-2 py-1\">`;\r\n            }).join('');\r\n\r\n            const stateMutabilityLabel = `<label class=\"block mb-2\">State Mutability: ${item.stateMutability}</label>`;\r\n\r\n            const button = `<button type=\"button\" web3fnc=\"${item.name}\" web3sm=\"${item.stateMutability}\" class=\"inline-flex items-center px-4 py-2 bg-blue-500 hover:bg-blue-700 text-white font-bold rounded-md\">Call ${item.name}</button>`;\r\n\r\n            const fieldset = document.createElement('fieldset');\r\n            fieldset.innerHTML = `<legend class=\"font-bold\">${item.name}</legend>${stateMutabilityLabel}${inputs}${button}`;\r\n\r\n            var form = document.createElement('form');\r\n            form.setAttribute(\"id\", item.name);\r\n            abiForm.appendChild(form).appendChild(fieldset);\r\n\r\n        }\r\n    });\r\n    const web3buttons = document.querySelectorAll('button');\r\n    web3buttons.forEach(button => {\r\n        button.addEventListener('click', () => {\r\n            const web3Fnc = button.getAttribute('web3fnc');\r\n            const web3SM = button.getAttribute('web3sm')\r\n            submitForm(web3Fnc, web3SM);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n* Connects to Ethereum's MetaMask and returns the signer. This is a low - level function and should not be used in production code.\r\n* \r\n* @return { Promise } A promise that resolves to the signer\r\n*/\r\nasync function connectToMetaMask() {\r\n    // If you have a MetaMask installed on the browser\r\n    if (!window.ethereum) {\r\n        throw new Error(\"Please install MetaMask!\");\r\n    }\r\n\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    await provider.send(\"eth_requestAccounts\", []);\r\n    const signer = provider.getSigner();\r\n    return signer;\r\n}\r\n\r\n/*\r\n* Function to submit form\r\n*/\r\n/**\r\n* Submit form to the contract and display the result to the user. This is a wrapper around the contract method that takes care of creating the transaction and sending it\r\n* \r\n* @param functionName - Name of the function to call\r\n* @param stateMutability - Whether or not to mutate the state\r\n*/\r\nasync function submitForm(functionName, stateMutability) {\r\n    const formData = new FormData(document.getElementById(functionName));\r\n    const data = {};\r\n    for (const [key, value] of formData.entries()) {\r\n        data[key] = value;\r\n    }\r\n    const signer = await connectToMetaMask();\r\n    const contract = new ethers.Contract(contractAddress, abi, signer);\r\n    try {\r\n        console.log(contractAddress);\r\n        const tx = await contract[functionName](...Object.values(data));\r\n        let jsonString = JSON.stringify(tx, null, 2);\r\n        Toastify({\r\n            close: true,\r\n            duration: -1,\r\n            text: jsonString,\r\n            className: \"info\",\r\n            style: {\r\n                background: \"linear-gradient(to right, #00b09b, #96c93d)\",\r\n            }\r\n        }).showToast();\r\n        console.log(\"Transaction sent:\", tx);\r\n    } catch (error) {\r\n        Toastify({\r\n            close: true,\r\n            duration: -1,\r\n            text: error.message,\r\n            className: \"error\",\r\n        }).showToast();\r\n        console.error(\"Error calling function:\", error);\r\n    }\r\n}"],"names":["contractAddress","abi","fetchData","url","response","fetch","data","json","results","error","console","connectToMetaMask","window","ethereum","Error","provider","ethers","providers","Web3Provider","send","getSigner","submitForm","functionName","stateMutability","formData","FormData","document","getElementById","key","value","entries","signer","contract","Contract","log","tx","Object","values","jsonString","JSON","stringify","Toastify","close","duration","text","className","style","background","showToast","message","alert","addEventListener","createSelectOptions","select","innerHTML","forEach","item","option","createElement","json_abi","contract_address","textContent","contract_name","appendChild","event","valuex","target","split","parse","changeContract","abiForm","type","inputs","map","input","name","join","stateMutabilityLabel","button","fieldset","form","setAttribute","web3buttons","querySelectorAll","getAttribute"],"version":3,"file":"index.e0e016e2.js.map"}